from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_ID
from db import add_user, get_all_users
from rashifol_data import rashifol

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_user(user_id)
    await update.message.reply_text("ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржмрж╛ржВрж▓рж╛ рж░рж╛рж╢рж┐ржлрж▓ ржЬрж╛ржирждрзЗ /rashifol рж░рж╛рж╢рж┐ ржирж╛ржо рж▓рж┐ржЦрзБржиред")

async def rashifol_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("ЁЯФо ржЙржжрж╛рж╣рж░ржг: /rashifol ржорзЗрж╖")
        return

    rashi = context.args[0].strip()
    message = rashifol.get(rashi)

    if message:
        await update.message.reply_text(f"ЁЯФо ржЖржЬржХрзЗрж░ рж░рж╛рж╢рж┐ржлрж▓ ({rashi}):\n\n{message}")
    else:
        await update.message.reply_text("тЭМ рж░рж╛рж╢рж┐рж░ ржирж╛ржо рж╕ржарж┐ржХ ржиржпрж╝ред")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред")
        return

    if not context.args:
        await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: /broadcast ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛")
        return

    msg = " ".join(context.args)
    users = get_all_users()
    sent = 0

    for uid in users:
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
            sent += 1
        except:
            pass

    await update.message.reply_text(f"тЬЕ {sent} ржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржХрж╛ржЫрзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("тЬ│я╕П ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛:\n/start\n/rashifol [рж░рж╛рж╢рж┐]\n/help\n/broadcast (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи)")
